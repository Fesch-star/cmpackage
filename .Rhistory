library(cmpackage)
??graph_from_data_frame
library(igraph)
??degree
??mutate
??return
library(cmpackage)
??
usethis::use_gpl3_license()
usethis::use_gpl3_license()
library(cmpackage)
library(cmpackage)
library(cmpackage)
library(readr)
sumvalue_weighted_edges_leaders <- read_csv("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/CM_analysis/data/raw/sumvalue_weighted_edges_leaders.csv")
View(sumvalue_weighted_edges_leaders)
library(readr)
nodes_leaders_idecointvalinstr <- read_csv("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/CM_analysis/data/raw/nodes_leaders_idecointvalinstr.csv")
View(nodes_leaders_idecointvalinstr)
base::return (list(nodelist, edgelist))
select_speaker_period_make_lists <- function(name, start, eind){
edgelist <- dplyr::select(dplyr::filter(sumvalue_weighted_edges_leaders, speaker == name &
map_date > start & map_date <= eind),
c(source, target, weight, edge_value, map_id, map_date, speaker)) %>% #select right speeches for map, with only the relevant columns
left_join(nodes_leaders_idecointvalinstr, by = c("source" = "node_name")) %>% #connect node characteristics to edgelist, by source
rename(from = id) %>%
left_join(nodes_leaders_idecointvalinstr, by = c("target" = "node_name")) %>% #connect node characteristics to edgelist, by target
rename(to = id)
#Make the accompanying nodelist by limiting total nodelist to only the nodes that are feature in the edges selected above
nodes <- sort (unique (c(unique(edgelist$from), unique(edgelist$to)))) #derive from & to nodes from edgelist
nodelist <- nodes_leaders_idecointvalinstr [c(nodes),] # limit total nodelist [nodes_leaders_idecointval] to nodes from this map
#add an id to the edges in the edgelist - so each edge become unique
edge_id <- rownames(edgelist)
edgelist <- cbind(edge_id=edge_id, edgelist)
#Clean edgelist (delete names & dimensions) & put in right order
# you cannot put the edge_id be the first column because transitioning the data into a map/graph requires from/to/weight to appear first in the df
edgelist <- select(edgelist, from, to, weight, edge_value, edge_id, map_id, map_date, speaker, value.x, value.y)
base::return (list(nodelist, edgelist))
}
select_speaker_period_make_lists()
select_speaker_period_make_lists(Mark Rutte, 2010-05-02, 2012-07-25)
select_speaker_period_make_lists("Mark Rutte", 2010-05-02, 2012-07-25)
# Loading the packages
library(readr)
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)
library(visNetwork)
select_speaker_period_make_lists("Mark Rutte", 2010-05-02, 2012-07-25)
select_speaker_period_make_lists("Rutte Mark", 2010-05-02, 2012-07-25)
select_speaker_period_make_lists <- function(name, start, eind){
edgelist <- dplyr::select(dplyr::filter(sumvalue_weighted_edges_leaders, speaker == name &
map_date > start & map_date <= eind),
c(source, target, weight, edge_value, map_id, map_date, speaker)) %>% #select right speeches for map, with only the relevant columns
dplyr::left_join(nodes_leaders_idecointvalinstr, by = c("source" = "node_name")) %>% #connect node characteristics to edgelist, by source
dplyr::rename(from = id) %>%
dplyr::left_join(nodes_leaders_idecointvalinstr, by = c("target" = "node_name")) %>% #connect node characteristics to edgelist, by target
dplyr::rename(to = id)
#Make the accompanying nodelist by limiting total nodelist to only the nodes that are feature in the edges selected above
nodes <- sort (unique (c(unique(edgelist$from), unique(edgelist$to)))) #derive from & to nodes from edgelist
nodelist <- nodes_leaders_idecointvalinstr [c(nodes),] # limit total nodelist [nodes_leaders_idecointval] to nodes from this map
#add an id to the edges in the edgelist - so each edge become unique
edge_id <- rownames(edgelist)
edgelist <- cbind(edge_id=edge_id, edgelist)
#Clean edgelist (delete names & dimensions) & put in right order
# you cannot put the edge_id be the first column because transitioning the data into a map/graph requires from/to/weight to appear first in the df
edgelist <- dplyr::select(edgelist, from, to, weight, edge_value, edge_id, map_id, map_date, speaker, value.x, value.y)
return (list(nodelist, edgelist))
}
select_speaker_period_make_lists("Rutte Mark", 2010-05-02, 2012-07-25)
rutte_p2_edgelist <- select_speaker_period_make_lists("Rutte Mark", 2010-05-02, 2012-07-25)[1]
rutte_p2_nodelist <- select_speaker_period_make_lists("Rutte Mark", 2010-05-02, 2012-07-25)[2]
select_speaker_period_make_lists <- function(name, start, eind){
edgelist <- select(filter(sumvalue_weighted_edges_leaders, speaker == name &
map_date > start & map_date <= eind),
c(source, target, weight, edge_value, map_id, map_date, speaker)) %>% #select right speeches for map, with only the relevant columns
left_join(nodes_leaders_idecointvalinstr, by = c("source" = "node_name")) %>% #connect node characteristics to edgelist, by source
rename(from = id) %>%
left_join(nodes_leaders_idecointvalinstr, by = c("target" = "node_name")) %>% #connect node characteristics to edgelist, by target
rename(to = id)
#Make the accompanying nodelist by limiting total nodelist to only the nodes that are feature in the edges selected above
nodes <- sort (unique (c(unique(edgelist$from), unique(edgelist$to)))) #derive from & to nodes from edgelist
nodelist <- nodes_leaders_idecointvalinstr [c(nodes),] # limit total nodelist [nodes_leaders_idecointval] to nodes from this map
#add an id to the edges in the edgelist - so each edge become unique
edge_id <- rownames(edgelist)
edgelist <- cbind(edge_id=edge_id, edgelist)
#Clean edgelist (delete names & dimensions) & put in right order
# you cannot put the edge_id be the first column because transitioning the data into a map/graph requires from/to/weight to appear first in the df
edgelist <- select(edgelist, from, to, weight, edge_value, edge_id, map_id, map_date, speaker, value.x, value.y)
return (list(nodelist, edgelist))
}
rutte_p2_edgelist <- select_speaker_period_make_lists("Rutte Mark", 2010-05-02, 2012-07-25)[1]
rutte_p2_nodelist <- select_speaker_period_make_lists("Rutte Mark", 2010-05-02, 2012-07-25)[2]
View(select_speaker_period_make_lists)
select_speaker_period_make_lists <- function(name, start, eind){
edgelist <- dplyr::select(dplyr::filter(sumvalue_weighted_edges_leaders, speaker == name &
map_date > start & map_date <= eind),
c(source, target, weight, edge_value, map_id, map_date, speaker)) %>% #select right speeches for map, with only the relevant columns
dplyr::left_join(nodes_leaders_idecointvalinstr, by = c("source" = "node_name")) %>% #connect node characteristics to edgelist, by source
dplyr::rename(from = id) %>%
dplyr::left_join(nodes_leaders_idecointvalinstr, by = c("target" = "node_name")) %>% #connect node characteristics to edgelist, by target
dplyr::rename(to = id)
#Make the accompanying nodelist by limiting total nodelist to only the nodes that are feature in the edges selected above
nodes <- sort (unique (c(unique(edgelist$from), unique(edgelist$to)))) #derive from & to nodes from edgelist
nodelist <- nodes_leaders_idecointvalinstr [c(nodes),] # limit total nodelist [nodes_leaders_idecointval] to nodes from this map
#add an id to the edges in the edgelist - so each edge become unique
edge_id <- rownames(edgelist)
edgelist <- cbind(edge_id=edge_id, edgelist)
#Clean edgelist (delete names & dimensions) & put in right order
# you cannot put the edge_id be the first column because transitioning the data into a map/graph requires from/to/weight to appear first in the df
edgelist <- dplyr::select(edgelist, from, to, weight, edge_value, edge_id, map_id, map_date, speaker, value.x, value.y)
return (list(nodelist, edgelist))
}
rutte_p2_edgelist <- select_speaker_period_make_lists("Rutte Mark", "2010-05-02", "2012-07-25")[1]
View(rutte_p2_edgelist)
View(rutte_p2_nodelist)
rutte_p2_edgelist <- select_speaker_period_make_lists("Rutte Mark", "2010-05-02", "2012-07-25")[1]
rutte_p2_nodelist <- select_speaker_period_make_lists("Rutte Mark", "2010-05-02", "2012-07-25")[2]
View(select_speaker_period_make_lists)
select_maps_make_lists <- function(name, start, eind){
edgelist <- select(filter(sumvalue_weighted_edges_leaders, speaker == name &
map_date > start & map_date <= eind),
c(source, target, weight, edge_value, map_id, map_date)) %>% #select right speeches for map
left_join(nodes_leaders_idecointval, by = c("source" = "node_name")) %>% #connect node characteristics to edgelist, source
rename(from = id) %>%
left_join(nodes_leaders_idecointval, by = c("target" = "node_name")) %>% #connect node characteristics to edgelist, target
rename(to = id)
#Make nodeslist by limiting total list to only the nodes in this map/edgelist
nodes <- sort (unique (c(unique(edgelist$from), unique(edgelist$to)))) #derive from & to nodes from edgelist
nodelist <- nodes_leaders_idecointval [c(nodes),] # limit total nodeslist (nodes_leaders_idecointval) to nodes from this map
#return <- nodelist
#nodelist <<- nodelist #return and store nodelist
#clean edgelist (delete names & dimensions) & put in right order
edgelist <- select(edgelist, from, to, weight, edge_value, map_id, map_date, value.x, value.y)
#return <- edgelist
#edgelist <<- edgelist #return and store edgelist
return (list(nodelist, edgelist))
}
select_maps_make_lists("Rutte Mark", "2010-05-02", "2012-07-25")[1]
# Loading the packages
library(readr)
sumvalue_weighted_edges_leaders <- read.csv ("CM_analysis/data/raw/sumvalue_weighted_edges_leaders.csv")
sumvalue_weighted_edges_leaders <- read.csv ("projects/CM_analysis/data/raw/sumvalue_weighted_edges_leaders.csv")
sumvalue_weighted_edges_leaders <- read.csv ("/.projects/CM_analysis/data/raw/sumvalue_weighted_edges_leaders.csv")
sumvalue_weighted_edges_leaders <- read.csv ("./projects/CM_analysis/data/raw/sumvalue_weighted_edges_leaders.csv")
getwd()
sumvalue_weighted_edges_leaders <- read.csv ("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/CM_analysis/data/raw/sumvalue_weighted_edges_leaders.csv")
nodes_leaders_idecointvalinstr <- read.csv("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/CM_analysis/data/raw/nodes_leaders_idecointvalinstr.csv")
source(select_speaker_period_make_lists)
source("R/select_speaker_period_make_lists")
source("select_speaker_period_make_lists")
source("select_speaker_period_make_lists.R")
source("R/select_speaker_period_make_lists.R")
rutte_p2_nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
# Loading the packages
library(readr)
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)
library(visNetwork)
rutte_p2_nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
rutte_p2_edgelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[2]]  #Saving edgelist
source("R/calc_degree_goW.R")
source("R/calc_degrees_goW.R")
node_calc_rutte_p2 <- calc_degrees_goW(rutte_p2_edgelist, rutte_p2_nodelist)
library(cmpackage)
getwd()
library(cmpackage)
sumvalue_weighted_edges_leaders <- read.csv ("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/CM_analysis/data/raw/sumvalue_weighted_edges_leaders.csv")
nodes_leaders_idecointvalinstr <- read.csv("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/CM_analysis/data/raw/nodes_leaders_idecointvalinstr.csv")
source("R/select_speaker_period_make_lists.R")
rutte_p2_nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
rutte_p2_edgelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[2]]  #Saving edgelist
usethis::use_testthat()
usethis
usethis::use_test("calc_degrees_goW.R")
make_groups <- function(names) {
shuffled <- matrix(sample(names), ncol=2)
return(shuffled)
}
make_groups("Anna", "Femke", "Luc", "Stefan")
make_groups <- function(names) {
shuffled <- matrix(sample(names), ncol=2)
return(shuffled)
}
make_groups(c("Anna", "Femke", "Luc", "Stefan")
make_groups(c("Anna", "Femke", "Luc", "Stefan"))
make_groups <- function(names) {
shuffled <- matrix(sample(names), ncol=2)
return(shuffled)
}
"
make_groups(c("Anna", "Femke", "Luc", "Stefan"))
make_groups(c("Anna", "Femke", "Luc", "Stefan"))
devtools::test()
return(shuffled)
group_my_friends <- function(){
friends <-  c("Thijs", "Eva", "Pablo", "Malte")
make_groups(friends)
}
return(shuffled)
make_groups <- function(names) {
if(length(names)%%2 > 0) {
stop("Uneven number of people")
}
shuffled <- matrix(sample(names), ncol = 2)
return(shuffled)
}
group_my_friends <- function(){
friends <-  c("Thijs", "Eva", "Pablo", "Malte")
make_groups(friends)
}
library(cmpackage)
make_groups(c("Anna", "Femke", "Luc", "Stefan", "pipo", "mamalou"))
test_that("groups are made correctly", {
group <- make_groups(c("Anna", "Femke", "Luc", "Stefan", "pipo", "mamalou"))
expect_true(ncol(group)== 2)
expect_false(nrow(group)== 2)
expect_equal(class(group)[1], "matrix")
})
test_that("groups are made correctly", {
group <- make_groups(c("Anna", "Femke", "Stefan", "pipo", "mamalou"))
expect_true(ncol(group)== 2)
expect_false(nrow(group)== 2)
expect_equal(class(group)[1], "matrix")
})
source("R/calc_degrees_goW.R")
node_calc_rutte_p2 <- calc_degrees_goW(rutte_p2_edgelist, rutte_p2_nodelist)
source("R/select_speaker_period_make_lists.R")
rutte_p2_nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
rutte_p2_edgelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[2]]  #Saving edgelist
class(rutte_p2_edgelist)
test_that("making edge and nodelist work correctly", {
nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
edgelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[2]]  #Saving edgelist
expect_true(ncol(nodelist)== 6)
expect_true(ncol(nodelist)== 10)
expect_equal(class(edgelist), "data.frame")
expect_equal(class(edgelist), "data.frame")
})
expect_true(ncol(edgelist)== 10)
test_that("making edge and nodelist work correctly", {
nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
edgelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[2]]  #Saving edgelist
expect_true(ncol(nodelist)== 6)
expect_true(ncol(edgelist)== 10)
expect_equal(class(edgelist), "data.frame")
expect_equal(class(edgelist), "data.frame")
})
View(nodes_leaders_idecointvalinstr)
View(rutte_p2_edgelist)
View(rutte_p2_nodelist)
test_that("making edge and nodelist work correctly", {
nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
edgelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[2]]  #Saving edgelist
expect_true(colname(nodelist)[1]== "id")
})
people <- c("anna", "femke","pipo", "mamalou")
save(people, file="tests/testthat/testdata.Rda")
load("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/cmpackage/tests/testthat/testdata.Rda")
install.packages("covr")
covr::report()
library(cmpackage)
covr::report()
covr::report(cmpackage)
library(covr)
covr::report("cmpackage")
install.packages("DT")
install.packages("htmltools")
install.packages("htmltools")
covr::report
covr::report()
covr::report()
covr::report()
covr::report("cmpackage")
test_that("groups are made correctly", {
group <- make_groups(c("Anna", "Femke", "Stefan", "luc", "pipo", "mamalou"))
expect_true(ncol(group)== 2)
expect_false(nrow(group)== 2)
expect_equal(class(group)[1], "matrix")
})
test_that("making edge and nodelist work correctly", {
nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
edgelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[2]]  #Saving edgelist
expect_true(ncol(nodelist)== 6)
expect_true(ncol(edgelist)== 10)
expect_equal(class(edgelist), "data.frame")
expect_equal(class(edgelist), "data.frame")
})
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
covr::report()
covr::report()
sumvalue_weighted_edges_leaders <- read.csv ("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/CM_analysis/data/raw/sumvalue_weighted_edges_leaders.csv")
nodes_leaders_idecointvalinstr <- read.csv("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/CM_analysis/data/raw/nodes_leaders_idecointvalinstr.csv")
source("R/select_speaker_period_make_lists.R")
rutte_p2_nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
View(select_speaker_period_make_lists)
source("R/select_speaker_period_make_lists.R")
rutte_p2_nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
rutte_p2_edgelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[2]]  #Saving edgelist
#to save data for a test
save(rutte_p2_edgelist, file="tests/testthat/testdata_edges.Rda")
save(rutte_p2_nodelist, file="tests/testthat/testdata_nodes.Rda")
load(file="testdata_edges.Rda")
load(file="testdata.Rda")
load(file="testdata.Rda")
getwd()
load(file="tests/testthat/testdata.Rda")
#to save data for a test
save(rutte_p2_edgelist, file="tests/testthat/testdata_edges.Rda")
load(file="tests/testthat/testdata_edges.Rda")
load(file="tests/testthat/testdata_edges.Rda")
rm(rutte_p2_edgelist)
load(file="tests/testthat/testdata_edges.Rda")
rm(rutte_p2_edgelist)
rm(rutte_p2_nodelist)
rutte_p2_edgelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[2]]  #Saving edgelist
rutte_p2_nodelist <- select_speaker_period_make_lists ("Rutte Mark", "2010-05-02", "2012-07-25")[[1]]  #Saving nodelist
View(rutte_p2_edgelist)
#to save data for a test
save(rutte_p2_edgelist, file="tests/testthat/testdata_edges.Rda")
save(rutte_p2_nodelist, file="tests/testthat/testdata_nodes.Rda")
View(rutte_p2_nodelist)
View(select_speaker_period_make_lists)
source("R/calc_degrees_goW.R")
View(calc_degrees_goW)
node_calc_rutte_p2 <- calc_degrees_goW(rutte_p2_edgelist, rutte_p2_nodelist)
View(node_calc_rutte_p2)
node_calc <- calc_degrees_goW(testdata_edges, testdata_nodes)
node_calc_rutte_p2 <- calc_degrees_goW(rutte_p2_edgelist, rutte_p2_nodelist)
node_calc <- calc_degrees_goW(rutte_p2_edgelist, rutte_p2_nodelist)
traceback()
graph_from_data_frame
igraph::graph_from_data_frame
# the covr:: report() does not work if your tests fail
rm(node_calc)
# the covr:: report() does not work if your tests fail
rm(node_calc_rutte_p2)
node_calc <- calc_degrees_goW(rutte_p2_edgelist, rutte_p2_nodelist)
View(node_calc)
View(node_calc)
View(node_calc)
load(file="./testdata_edges.Rda")
usethis::use_readme_md()
install.packages("roxygen2")
library("roxygen2")
calc_degrees_goW <- function(edgelist, nodelist) {
#transform edge & nodelist into a map
map <- igraph::graph_from_data_frame(d = edgelist, vertices = nodelist, directed = TRUE)
#calculate for each node
deg <- igraph::degree(map, mode = "all") #degrees (centrality in CM speech)
indeg <- igraph::degree(map, mode = "in") #indegrees
outdeg <- igraph::degree(map, mode = "out") #outdegrees
w_indeg <- igraph::strength(map, mode = "in") #weighted indegrees
w_outdeg <- igraph::strength(map, mode = "out") #weighted outdegrees
w_deg <- igraph::strength(map, mode = "all") #weighted degrees (saliency in CM speech)
#make new df to store the calculated values
node_calc <- nodelist
#link vectors with all the (weighted) degrees values to
#the new node_calc df as columns
node_calc$indegree <- indeg
node_calc$outdegree <- outdeg
node_calc$degree <- deg
node_calc$w_indegree <- w_indeg
node_calc$w_outdegree <- w_outdeg
node_calc$w_degree <- w_deg
#calculates go & goW and link it to the df node_calc as columns
node_calc <- dplyr::mutate(node_calc,
go = (node_calc$indegree - node_calc$outdegree) / node_calc$degree,
gow = (node_calc$w_indegree - node_calc$w_outdegree) / node_calc$w_degree)
base::return(node_calc) #returns the df node_calc with all calculated values
}
?calc_degrees_goW
#' @return The function transforms the data into a map (graph) to do the calculations.
#'   It returns a dataframe entitled "node_calc" with all calculated values as
#'   well as the original data.
#' For the function to return and store the following output a df with the values,
#'  you need to insert the following codes below the function in your script:
#'       - node_calc_name_period <- calc_degrees_goW(edgelist, nodelist)
#'
#'
#' @export
#'
calc_degrees_goW <- function(edgelist, nodelist) {
#transform edge & nodelist into a map
map <- igraph::graph_from_data_frame(d = edgelist, vertices = nodelist, directed = TRUE)
#calculate for each node
deg <- igraph::degree(map, mode = "all") #degrees (centrality in CM speech)
indeg <- igraph::degree(map, mode = "in") #indegrees
outdeg <- igraph::degree(map, mode = "out") #outdegrees
w_indeg <- igraph::strength(map, mode = "in") #weighted indegrees
w_outdeg <- igraph::strength(map, mode = "out") #weighted outdegrees
w_deg <- igraph::strength(map, mode = "all") #weighted degrees (saliency in CM speech)
#make new df to store the calculated values
node_calc <- nodelist
#link vectors with all the (weighted) degrees values to
#the new node_calc df as columns
node_calc$indegree <- indeg
node_calc$outdegree <- outdeg
node_calc$degree <- deg
node_calc$w_indegree <- w_indeg
node_calc$w_outdegree <- w_outdeg
node_calc$w_degree <- w_deg
#calculates go & goW and link it to the df node_calc as columns
node_calc <- dplyr::mutate(node_calc,
go = (node_calc$indegree - node_calc$outdegree) / node_calc$degree,
gow = (node_calc$w_indegree - node_calc$w_outdegree) / node_calc$w_degree)
base::return(node_calc) #returns the df node_calc with all calculated values
}
library(cmpackage)
rm(calc_degrees_goW())
rm("calc_degrees_goW")
?calc_degrees_goW
library(cmpackage)
?calc_degrees_goW
library(cmpackage)
?calc_degrees_goW
library(cmpackage)
?calc_degrees_goW
library(cmpackage)
usethis::use_package("starwarsdb")
usethis::use_package("dplyr", min_version = T)
usethis::use_package("igraph", min_version = T)
?calc_degree_goW.R
?calc_degrees_goW
usethis::use_package("tidygraph", min_version = T)
usethis::use_package("")
install.packages("roxygen2")
library(roxygen2)
library(cmpackage)
?calc_degrees_goW
?make_groups
?calc_dims
library(cmpackage)
library(cmpackage)
?calc_degrees_goW
?make_groups
?calc_dims
load("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/cmpackage/tests/testthat/testdata_nodes.Rda")
View(rutte_p2_nodelist)
rm(rutte_p2_nodelist)
load("C:/Users/Femke.DESKTOP-UDM2EUG/surfdrive/R/projects/cmpackage/tests/testthat/testdata_edges.Rda")
View(rutte_p2_edgelist)
rm(rutte_p2_edgelist)
library(cmpackage)
library(cmpackage)
library(cmpackage)
